{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Products API\nexport const productsAPI = {\n  getAll: () => api.get('/products'),\n  getByCode: code => api.get(`/products/${code}`),\n  create: product => api.post('/products', product),\n  restock: (code, quantity) => api.post(`/products/${code}/restock?quantity=${quantity}`),\n  health: () => api.get('/products/health')\n};\n\n// Orders API\nexport const ordersAPI = {\n  getAll: (startDate, endDate) => api.get('/orders', {\n    params: {\n      startDate,\n      endDate\n    }\n  }),\n  getById: id => api.get(`/orders/${id}`),\n  create: order => api.post('/orders', order),\n  confirm: id => api.post(`/orders/${id}/confirm`)\n};\n\n// Tax API\nexport const taxAPI = {\n  calculate: request => api.post('/tax/calculate', request),\n  health: () => api.get('/tax/health')\n};\n\n// Sales Registry API\nexport const salesRegistryAPI = {\n  getMonthlyReport: (year, month) => api.get(`/sales-registry/report/${year}/${month}`),\n  health: () => api.get('/sales-registry/health')\n};\n\n// Health check for all services\nexport const healthCheck = async () => {\n  try {\n    const [products, tax, salesRegistry] = await Promise.all([productsAPI.health(), taxAPI.health(), salesRegistryAPI.health()]);\n    return {\n      products: products.data,\n      tax: tax.data,\n      salesRegistry: salesRegistry.data,\n      allHealthy: true\n    };\n  } catch (error) {\n    return {\n      allHealthy: false,\n      error: error.message\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","productsAPI","getAll","get","getByCode","code","product","post","restock","quantity","health","ordersAPI","startDate","endDate","params","getById","id","order","confirm","taxAPI","calculate","request","salesRegistryAPI","getMonthlyReport","year","month","healthCheck","products","tax","salesRegistry","Promise","all","data","allHealthy","error","message"],"sources":["C:/Users/eduar/Faculdade/t1-projarq-pucrs/microservices/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Products API\r\nexport const productsAPI = {\r\n  getAll: () => api.get('/products'),\r\n  getByCode: (code) => api.get(`/products/${code}`),\r\n  create: (product) => api.post('/products', product),\r\n  restock: (code, quantity) => api.post(`/products/${code}/restock?quantity=${quantity}`),\r\n  health: () => api.get('/products/health'),\r\n};\r\n\r\n// Orders API\r\nexport const ordersAPI = {\r\n  getAll: (startDate, endDate) => api.get('/orders', {\r\n    params: { startDate, endDate }\r\n  }),\r\n  getById: (id) => api.get(`/orders/${id}`),\r\n  create: (order) => api.post('/orders', order),\r\n  confirm: (id) => api.post(`/orders/${id}/confirm`),\r\n};\r\n\r\n// Tax API\r\nexport const taxAPI = {\r\n  calculate: (request) => api.post('/tax/calculate', request),\r\n  health: () => api.get('/tax/health'),\r\n};\r\n\r\n// Sales Registry API\r\nexport const salesRegistryAPI = {\r\n  getMonthlyReport: (year, month) => api.get(`/sales-registry/report/${year}/${month}`),\r\n  health: () => api.get('/sales-registry/health'),\r\n};\r\n\r\n// Health check for all services\r\nexport const healthCheck = async () => {\r\n  try {\r\n    const [products, tax, salesRegistry] = await Promise.all([\r\n      productsAPI.health(),\r\n      taxAPI.health(),\r\n      salesRegistryAPI.health(),\r\n    ]);\r\n    \r\n    return {\r\n      products: products.data,\r\n      tax: tax.data,\r\n      salesRegistry: salesRegistry.data,\r\n      allHealthy: true,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      allHealthy: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,MAAM,EAAEA,CAAA,KAAML,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;EAClCC,SAAS,EAAGC,IAAI,IAAKR,GAAG,CAACM,GAAG,CAAC,aAAaE,IAAI,EAAE,CAAC;EACjDP,MAAM,EAAGQ,OAAO,IAAKT,GAAG,CAACU,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC;EACnDE,OAAO,EAAEA,CAACH,IAAI,EAAEI,QAAQ,KAAKZ,GAAG,CAACU,IAAI,CAAC,aAAaF,IAAI,qBAAqBI,QAAQ,EAAE,CAAC;EACvFC,MAAM,EAAEA,CAAA,KAAMb,GAAG,CAACM,GAAG,CAAC,kBAAkB;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAG;EACvBT,MAAM,EAAEA,CAACU,SAAS,EAAEC,OAAO,KAAKhB,GAAG,CAACM,GAAG,CAAC,SAAS,EAAE;IACjDW,MAAM,EAAE;MAAEF,SAAS;MAAEC;IAAQ;EAC/B,CAAC,CAAC;EACFE,OAAO,EAAGC,EAAE,IAAKnB,GAAG,CAACM,GAAG,CAAC,WAAWa,EAAE,EAAE,CAAC;EACzClB,MAAM,EAAGmB,KAAK,IAAKpB,GAAG,CAACU,IAAI,CAAC,SAAS,EAAEU,KAAK,CAAC;EAC7CC,OAAO,EAAGF,EAAE,IAAKnB,GAAG,CAACU,IAAI,CAAC,WAAWS,EAAE,UAAU;AACnD,CAAC;;AAED;AACA,OAAO,MAAMG,MAAM,GAAG;EACpBC,SAAS,EAAGC,OAAO,IAAKxB,GAAG,CAACU,IAAI,CAAC,gBAAgB,EAAEc,OAAO,CAAC;EAC3DX,MAAM,EAAEA,CAAA,KAAMb,GAAG,CAACM,GAAG,CAAC,aAAa;AACrC,CAAC;;AAED;AACA,OAAO,MAAMmB,gBAAgB,GAAG;EAC9BC,gBAAgB,EAAEA,CAACC,IAAI,EAAEC,KAAK,KAAK5B,GAAG,CAACM,GAAG,CAAC,0BAA0BqB,IAAI,IAAIC,KAAK,EAAE,CAAC;EACrFf,MAAM,EAAEA,CAAA,KAAMb,GAAG,CAACM,GAAG,CAAC,wBAAwB;AAChD,CAAC;;AAED;AACA,OAAO,MAAMuB,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAM,CAACC,QAAQ,EAAEC,GAAG,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvD9B,WAAW,CAACS,MAAM,CAAC,CAAC,EACpBS,MAAM,CAACT,MAAM,CAAC,CAAC,EACfY,gBAAgB,CAACZ,MAAM,CAAC,CAAC,CAC1B,CAAC;IAEF,OAAO;MACLiB,QAAQ,EAAEA,QAAQ,CAACK,IAAI;MACvBJ,GAAG,EAAEA,GAAG,CAACI,IAAI;MACbH,aAAa,EAAEA,aAAa,CAACG,IAAI;MACjCC,UAAU,EAAE;IACd,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MACLD,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAEA,KAAK,CAACC;IACf,CAAC;EACH;AACF,CAAC;AAED,eAAetC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}